<!-- <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TherapEase Video Session</title>
    <script src="https://8x8.vc/external_api.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      body {
        margin: 0;
        padding: 0;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: #f5f7fa;
        overflow: hidden;
      }
      #jitsi-container {
        width: 100%;
        height: 100vh;
      }
      .session-header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background: rgba(255, 255, 255, 0.95);
        padding: 12px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        z-index: 100;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }
      .session-info {
        font-size: 14px;
      }
      .session-timer {
        background: #4a6fa5;
        color: white;
        padding: 6px 12px;
        border-radius: 4px;
        font-weight: bold;
      }
      .end-call-container {
        position: fixed;
        bottom: 20px;
        left: 0;
        right: 0;
        display: flex;
        justify-content: center;
        z-index: 100;
      }
      .end-call-btn {
        background: #ff5f5f;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 50px;
        font-size: 16px;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(255, 95, 95, 0.3);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
      }
      .end-call-btn:hover {
        background: #e53e3e;
        transform: scale(1.05);
      }
      .end-call-btn i {
        font-size: 18px;
      }
    </style>
  </head>
  <body>
    <div class="session-header">
      <div class="session-info">
        <strong>Session with:</strong>
        <%= sessionPartnerName %>
        <span style="margin: 0 10px">â€¢</span>
        <strong>Time:</strong> <%= appointmentDateFormatted %>, <%=
        appointment.time %> - <%= appointmentEndTimeFormatted %>
      </div>
      <div class="session-timer" id="sessionTimer">
        <i class="fas fa-clock"></i> 30:00
      </div>
    </div>

    <div id="jitsi-container"></div>

    <div class="end-call-container">
      <button class="end-call-btn" id="endCallBtn">
        <i class="fas fa-phone-slash"></i> End Session
      </button>
    </div>

    <script>
            // 8x8 JaaS API configuration
      const domain = '8x8.vc';
      const options = {
          roomName: '<%= roomName %>',
          width: '100%',
          height: '100%',
          parentNode: document.querySelector('#jitsi-container'),
          jwt: null,
          userInfo: {
              displayName: '<%= displayName %>',
              email: '<%= user.email %>'
          },
          interfaceConfigOverwrite: {
              DISABLE_JOIN_LEAVE_NOTIFICATIONS: true,
              SHOW_JITSI_WATERMARK: false,
              SHOW_WATERMARK_FOR_GUESTS: false,
              DEFAULT_BACKGROUND: '#f5f7fa',
              TOOLBAR_BUTTONS: [
                  'microphone', 'camera', 'closedcaptions', 'desktop',
                  'fullscreen', 'fodeviceselection', 'hangup', 'profile',
                  'chat', 'settings', 'raisehand', 'videoquality',
                  'filmstrip', 'tileview'
              ],
              APP_NAME: 'TherapEase',
              NATIVE_APP_NAME: 'TherapEase',
              MOBILE_APP_PROMO: false,
              DISABLE_FOCUS_INDICATOR: true,
              DISABLE_DOMINANT_SPEAKER_INDICATOR: true
          },
          configOverwrite: {
              startWithAudioMuted: false,
              startWithVideoMuted: false,
              enableNoisyMicDetection: true,
              prejoinPageEnabled: false,
              disableModeratorIndicator: true,
              requireDisplayName: false,
              enableUserRolesBasedOnToken: false,
              enableFeaturesBasedOnToken: false,
              disableProfile: true,
              enableWelcomePage: false,
              enableClosePage: false,
              disableRemoteMute: true,
              enableLobby: false,
              openBridgeChannel: true,
              startConferenceOnJoin: true,
              startWithoutUserInput: true,
              startAsVideoConference: true,
              disableInitialGUM: false,

              // Critical settings for moderator issue
              testing: {
                  enableP2P: true,
                  disableE2EE: true,
                  mobileXmppWsThreshold: 10,
              },
              p2p: {
                  enabled: true,
                  preferH264: true,
                  disableH264: false,
                  useStunTurn: true
              },

              // Make everyone a moderator
              enableInsecureRoomNameWarning: false,
              enableNoisyMicDetection: true,
              channelLastN: -1,
              maxFullResolutionParticipants: -1,
              startAudioMuted: 0,
              startVideoMuted: 0,

              // Try to force bypass moderator requirement
              ignore1To1Mode: true,
              ignoreStartMuted: true,

              // Force conference options
              conference: {
                  enableLayerSuspension: true,
                  autoStartRecording: false,
                  p2p: {
                      enabled: true
                  }
              },

              hosts: {
                  domain: '8x8.vc',
                  muc: 'conference.8x8.vc'
              },
              bosh: 'https://8x8.vc/http-bind',
              appID: 'vpaas-magic-cookie-6684cbac248849fba903c967cec89299',
              constraints: {
                  video: {
                      height: {
                          ideal: 720,
                          max: 720,
                          min: 240
                      }
                  }
              },
              resolution: 720,
              defaultLanguage: 'en',
              deploymentInfo: {
                  environment: 'vpaas',
                  userRegion: 'us'
              }
          },
          // Force all users to be moderators
          userRole: 'moderator'
      };

      // Initialize 8x8 JaaS API with error handling
      let api;
      try {
          api = new JitsiMeetExternalAPI(domain, options);

          // Make everyone a moderator as soon as they join
          api.addEventListener('participantRoleChanged', (event) => {
              if (event.role === 'participant') {
                  api.executeCommand('toggleModeration', true);
                  setTimeout(() => {
                      api.executeCommand('grantModerator', event.id);
                  }, 1000);
              }
          });

          // Set session subject
          api.executeCommand('subject', `Therapy Session - <%= appointment._id %>`);

          // Force start the conference
          api.executeCommand('startConference');

          // Try to bypass any moderator checks
          setTimeout(() => {
              api.executeCommand('toggleModeration', false);
          }, 2000);

          // Therapist or patient-specific configurations
          <% if(isTherapist) { %>
              api.executeCommand('toggleTileView');
              api.executeCommand('setTileView', { columns: 1 });
          <% } else { %>
              setTimeout(() => {
                  try {
                      api.executeCommand('pinParticipant', '<%= appointment.therapistId._id %>');
                  } catch (e) {
                      console.log("Couldn't pin participant yet", e);
                  }
              }, 3000);
          <% } %>

          // Session timer - 30 minutes countdown
          let timeRemaining = 30 * 60;
          const timerElement = document.getElementById('sessionTimer');

          const updateTimer = () => {
              const minutes = Math.floor(timeRemaining / 60);
              const seconds = timeRemaining % 60;
              timerElement.innerHTML = `<i class="fas fa-clock"></i> ${minutes}:${seconds.toString().padStart(2, '0')}`;

              if (timeRemaining <= 0) {
                  clearInterval(timerInterval);
                  api.executeCommand('hangup');
              } else {
                  timeRemaining--;
              }
          };

          const timerInterval = setInterval(updateTimer, 1000);

          // End call button
          document.getElementById('endCallBtn').addEventListener('click', () => {
              if (confirm('End this therapy session?')) {
                  api.executeCommand('hangup');
              }
          });

          // Handle connection events
          api.addListener('readyToClose', () => {
              clearInterval(timerInterval);
              window.location.href = '<%= isTherapist ? "/therapist/appointment-list" : "/client/dashboard" %>';
          });

          api.addListener('participantJoined', (participant) => {
              console.log('Participant joined:', participant.displayName);
              // Auto-grant moderator privileges to all participants
              setTimeout(() => {
                  try {
                      api.executeCommand('grantModerator', participant.id);
                  } catch (e) {
                      console.log("Couldn't grant moderator status", e);
                  }
              }, 1000);
          });

          api.addListener('participantLeft', (participant) => {
              console.log('Participant left:', participant.displayName);
          });

          api.addListener('videoConferenceJoined', (conference) => {
              console.log('Local participant joined', conference);
              // Auto-start the conference when joined
              api.executeCommand('startConference');
          });

          // Automatically end the meeting after 30 minutes (1800 seconds)
          setTimeout(() => {
              api.executeCommand('hangup');
          }, 1800000); // 30 minutes in milliseconds

      } catch (error) {
          console.error('8x8 JaaS initialization error:', error);
          alert('Failed to initialize video call. Please refresh the page and try again.');
      }
    </script>
  </body>
</html> -->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TherapEase Video Session</title>
    <script src="https://8x8.vc/external_api.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      body {
        margin: 0;
        padding: 0;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: #f5f7fa;
        overflow: hidden;
      }
      #jitsi-container {
        width: 100%;
        height: 100vh;
      }
      .session-header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background: rgba(255, 255, 255, 0.95);
        padding: 12px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        z-index: 100;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }
      .session-info {
        font-size: 14px;
      }
      .session-timer {
        background: #4a6fa5;
        color: white;
        padding: 6px 12px;
        border-radius: 4px;
        font-weight: bold;
      }
      .end-call-container {
        position: fixed;
        bottom: 20px;
        left: 0;
        right: 0;
        display: flex;
        justify-content: center;
        z-index: 100;
      }
      .end-call-btn {
        background: #ff5f5f;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 50px;
        font-size: 16px;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(255, 95, 95, 0.3);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
      }
      .end-call-btn:hover {
        background: #e53e3e;
        transform: scale(1.05);
      }
      .end-call-btn i {
        font-size: 18px;
      }
    </style>
  </head>
  <body>
    <div class="session-header">
      <div class="session-info">
        <strong>Session with:</strong>
        <%= sessionPartnerName || 'Unknown Participant' %>
        <span style="margin: 0 10px">â€¢</span>
        <strong>Time:</strong> <%= appointmentDateFormatted || 'N/A' %>, <%=
        appointment.time || 'N/A' %> - <%= appointmentEndTimeFormatted || 'N/A'
        %>
      </div>
      <div class="session-timer" id="sessionTimer">
        <i class="fas fa-clock"></i> 30:00
      </div>
    </div>

    <div id="jitsi-container"></div>

    <div class="end-call-container">
      <button class="end-call-btn" id="endCallBtn">
        <i class="fas fa-phone-slash"></i> End Session
      </button>
    </div>

    <script>
      const domain = '<%= jitsiDomain || "8x8.vc" %>';
      const options = {
        roomName: '<%= roomName || "therapease-room-" + Date.now() %>',
        width: '100%',
        height: '100%',
        parentNode: document.querySelector('#jitsi-container'),
        jwt: '<%= jwtToken || "" %>',
        userInfo: {
          displayName: '<%= displayName || "Anonymous" %>',
          email: '<%= user.email || "" %>'
        },
        interfaceConfigOverwrite: {
          DISABLE_JOIN_LEAVE_NOTIFICATIONS: true,
          SHOW_JITSI_WATERMARK: false,
          SHOW_WATERMARK_FOR_GUESTS: false,
          DEFAULT_BACKGROUND: '#f5f7fa',
          TOOLBAR_BUTTONS: [
            'microphone', 'camera', 'fullscreen', 'hangup', 'chat', 'tileview'
          ],
          APP_NAME: 'TherapEase',
          NATIVE_APP_NAME: 'TherapEase',
          MOBILE_APP_PROMO: false,
          SHOW_PROMOTIONAL_CLOSE_PAGE: false,
          HIDE_KICK_BUTTON_FOR_GUESTS: true
        },
        configOverwrite: {
          startWithAudioMuted: false,
          startWithVideoMuted: false,
          prejoinPageEnabled: false,
          disableModeratorIndicator: true,
          requireDisplayName: false,
          enableUserRolesBasedOnToken: true,
          enableFeaturesBasedOnToken: true,
          disableProfile: true,
          enableWelcomePage: false,
          enableClosePage: false,
          disableRemoteMute: true,
          enableLobby: false,
          doNotStoreRoom: true,
          remoteVideoMenu: {
            disableKick: true,
            disableGrantModerator: true
          },
          appId: 'vpaas-magic-cookie-6684cbac248849fba903c967cec89299',
          constraints: {
            video: {
              height: { ideal: 720, max: 720, min: 240 }
            }
          },
          resolution: 720,
          defaultLanguage: 'en',
          disableSimulcast: false,
          useTurnUdp: true,
          p2p: {
            enabled: false
          }
        }
      };

      console.log('JWT Token:', '<%= jwtToken || "" %>');

      let api;
      try {
        api = new JitsiMeetExternalAPI(domain, options);

        // Set session subject
        api.executeCommand('subject', `Therapy Session - <%= appointment._id || "unknown" %>`);

        // Check and request media devices
        api.isAudioAvailable().then(available => {
          if (!available) {
            console.warn('Audio not available, requesting access');
            api.executeCommand('startAudio');
            alert('Please allow microphone access to join the call.');
          } else {
            console.log('Audio is available');
          }
        }).catch(err => {
          console.error('Audio availability error:', err);
          alert('Microphone access denied. Please enable it in your browser settings.');
        });

        api.isVideoAvailable().then(available => {
          if (!available) {
            console.warn('Video not available, requesting access');
            api.executeCommand('startVideo');
            alert('Please allow camera access to join the call.');
          } else {
            console.log('Video is available');
          }
        }).catch(err => {
          console.error('Video availability error:', err);
          alert('Camera access denied. Please enable it in your browser settings.');
        });

        // Therapist-specific configurations
        <% if(typeof isTherapist !== 'undefined' && isTherapist) { %>
          api.executeCommand('toggleTileView');
          api.executeCommand('setTileView', { columns: 1 });
        <% } %>

        // Session timer - 30 minutes countdown
        let timeRemaining = 30 * 60;
        const timerElement = document.getElementById('sessionTimer');
        const updateTimer = () => {
          const minutes = Math.floor(timeRemaining / 60);
          const seconds = timeRemaining % 60;
          timerElement.innerHTML = `<i class="fas fa-clock"></i> ${minutes}:${seconds.toString().padStart(2, '0')}`;
          if (timeRemaining <= 0) {
            clearInterval(timerInterval);
            api.executeCommand('hangup');
          } else {
            timeRemaining--;
          }
        };
        const timerInterval = setInterval(updateTimer, 1000);

        // End call button
        document.getElementById('endCallBtn').addEventListener('click', () => {
          if (confirm('End this therapy session?')) {
            api.executeCommand('hangup');
          }
        });

        // Handle connection events with detailed logging
        api.addListener('readyToClose', () => {
          console.log('Meeting closed, redirecting...');
          clearInterval(timerInterval);
          window.location.href = '<%= typeof isTherapist !== "undefined" && isTherapist ? "/therapist/appointment-list" : "/client/dashboard" %>';
        });

        api.addListener('participantJoined', (participant) => {
          console.log('Participant joined:', {
            id: participant.id,
            displayName: participant.displayName
          });
        });

        api.addListener('participantLeft', (participant) => {
          console.log('Participant left:', {
            id: participant.id,
            displayName: participant.displayName
          });
        });

        api.addListener('videoConferenceJoined', (data) => {
          console.log('Joined conference:', {
            id: data.id,
            role: data.role,
            roomName: data.roomName,
            displayName: data.displayName
          });
          // Log all participants after joining
          api.getParticipantsInfo().then(participants => {
            console.log('Current participants:', participants);
          });
        });

        // Auto-end meeting after 30 minutes
        setTimeout(() => {
          api.executeCommand('hangup');
        }, 1800000);

      } catch (error) {
        console.error('Jitsi initialization error:', error);
        alert('Failed to initialize video call. Please refresh and try again.');
      }
    </script>
  </body>
</html>
